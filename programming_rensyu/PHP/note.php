<?php 
//lesson４(配列 / print_r() / 二次元配列 / 連想配列 / foreach)
//１－配列
    //複数の変数を一気に設定したいとき→複合型変数（array型）
    $info4_1_1 = array('鈴木','愛媛','20歳');

    //配列に後から値を追加したいとき（変数なので正確には配列の上書き）（上書きされるインデックス番号を指定しなければ全ての配列が上書きされる）
    $info4_1_1[] = '貯金３円';

    $info4_1_1 = ['大学生'];//この時$info4_1_1は全て上書きされていることに注意！（これは$info4_1_1を配列['大学生',空,空,空,...,空]で上書きするという意味）
    $info4_1_1[2]= 5;//インデックス番号の指定もできる(ただし、変数なので上書きされるがこのとき$info4_1_1に['大学生']しかなく、その他のインデックス番号は空配列になっているため空配列[2]が上書きされている)
    $info4_1_1[3]= '男';

    $info4_1_2 = ['田中','埼玉','20歳'];//これは空配列の中に後から値を追加したような感じ
    $info4_1_2[] = '貯金３円';//インデックス番号の指定がない時は一番後ろに追加される。
    $info4_1_2[5] = '借金１０円';

    echo $info4_1_1[2];
    echo '<br>';
    echo  $info4_1_2[2];
    echo '<br>';

//2-配列の表示(デバックで配列の中に何が入っているのかを調べるための関数)　var_dump関数とprint_r関数
    //var_dumpは複数の変数を一気に表示できる、print_rは第二引数に
    echo '<br>';
    var_dump($info4_1_1,$info4_1_2);//変数のデータ型（値の個数）｛　[インデックス番号]  => そのインデックス番号に対応するデータの型　string(文字のデータのサイズ(全角は３バイト、半角は１バイト))、int(データの値)｝

    echo '<br>';
    print_r($info4_1_1);//変数のデータ型 {[インデックス番号]  => そのインデックス番号に対応するデータの値}

    echo '<br>';
    echo print_r($info4_1_1,true);//第二引数(print_rでは return 引数と呼ぶ)を指定した場合は結果を表示せずに、結果だけが得られる。string,int,floatなどの型を指定した場合は指定した型で返ってくる。array を指定した場合、キーと要素を表す形式で値が 表示されます。object に関しても同様の表示形式となります。TRUE(trueでも可)を指定したときはprint_rの結果をそのまま変数として得ることができる（この関数は string を返す。それ以外の場合の戻り値は true　となる。）。

    echo '<br>';
    print_r($info4_1_1,false);

    echo '<br>';

//3-連想配列→インデックス番号がキー名になるだけ(表示方法も同じ)
    $info4_3_1 = array(
        '名前' => '山田',
        '住所' => '愛媛',
        '年齢' => '20才',
    );

    $info4_3_2 = [
        '名前' => '山田',
        '住所' => '愛媛',
        '年齢' => '20才',
    ];

    print_r($info4_3_1);
    echo '<br>';
    print_r($info4_3_2);
    echo '<br>';

    $color_name = ['blue' => '青'];
    $color = ['blue' => '#0000FF'];
    $key = 'blue';
    echo  "<div style='color:{$color[$key]}'>{$color_name[$key]}</div>";//phpにhtmlを呼び出す方法

    echo '<br>';

//4-4 二次元配列
    $info4_4_1 = [
        ['鈴木','愛媛','20歳'],
        ['田中','埼玉','20歳']
    ];//一次元配列の中に配列
    
    $info4_4_2 = [
        'person1' =>['名前' => '鈴木','住所' => '愛媛','年齢' => '20歳'],
        'person2' =>['名前' => '田中','住所' => '埼玉','年齢' => '20歳']
    ];//連想配列の中に連想配列

    $info4_4_3 = [
        ['名前' => '鈴木','住所' => '愛媛','年齢' => '20歳'],
        ['名前' => '田中','住所' => '埼玉','年齢' => '20歳']
    ];//一次元配列の中に連想配列

    $info4_4_4 = [
        'person1' => ['鈴木','愛媛','20歳'],
        'person2' => ['田中','埼玉','20歳']
    ];//連想配列の中に一次元配列

    print_r ($info4_4_1); 
    echo '<br>';  
    print_r ($info4_4_1[1]); 
    echo '<br>'; 
    print_r ($info4_4_2);
    echo '<br>';
    print_r ($info4_4_3);
    echo '<br>';
    print_r ($info4_4_4);
    echo '<br>';

    echo $info4_4_3 [1] ['住所'];
    echo '<br>';

//４-５ foreach 配列から順番に取り出して、変数に代入していくループ処理(処配列の中にある全ての値に対してなんらかの同じ処理を繰り返したい時に使える)

    //１.foreachの基本形態(一次元配列)
    $price = array(100,200,300);//配列に入っている情報を一つずつ取り出す
    //税込表示
    foreach($price as $value){
        $result = $value * 1.1;
        echo '（税込）'.$result.'円';
        echo '<br>';
    }

    $price = array(100,200,300);
    //税込表示
    foreach($price as $goods=>$value){
        echo '商品'.$goods;
        $result = $value * 1.1;
        echo '（税込）'.$result.'円';
        echo '<br>';
    }

    echo '<br>';

    //２.foreachの基本形態(連想配列)

    //foreach(配列変数名 as (配列のキー名 => 配列の値)){実行処理}  (分かりやすくするためにasのところに()を入れたけど、実際はエラーになるので注意！)
    $person_4_5_1 = array(
        '名前' => '山田',
        '住所' => '愛媛',
        '年齢' => '20才',
    );  
    foreach($person_4_5_1 as $item_4_5_1 => $info_4_5_1){
        echo $item_4_5_1.':';     
        echo $info_4_5_1.'<br>'; 
    }//$person_4_5_1の配列に順番にecho $item_4_5_1.':'; と echo $info_4_5_1.'<br>';という処理をくりかえしおこなっている

    //３.foreachの基本形態(二次元配列)

    $info4_4_3 = [
        ['名前' => '鈴木','住所' => '愛媛','年齢' => '20歳'],
        ['名前' => '田中','住所' => '埼玉','年齢' => '20歳']
    ];//一次元配列の中に連想配列

    foreach ($info4_4_3 as $person_4_5_2 ) {
        foreach ($person_4_5_2 as $item_4_5_2 => $info_4_5_2) {
            echo $item_4_5_2.':';
            echo $info_4_5_2.'<br>'; 
        }
    }

    foreach ($info4_4_3 as $person_number_4_5_2 => $person_4_5_2 ) {
        echo $person_number_4_5_2.'人目<br>';
        foreach ($person_4_5_2 as $item_4_5_2 => $info_4_5_2) {
            echo $item_4_5_2.':';
            echo $info_4_5_2.'<br>'; 
        }
    }


//Lesson 5 関数について

    //２～４ php 変数のスコープ（javascript と大きく異なるので調べておく）
    //関数の定義
    function calc ($val_1,$val_2,$v = 10) {  //$val_1,$val_2は仮引数でここに実引数が代入される($vはデフォルト引数であり、ここにはローカルスコープのものは代入されない)
        $ans = ($val_1 + $val_2) * $v;
        return $ans;//ユーザー定義関数はここの１６０、１６１行目で関数 calc の戻り値を設定しないと結果が出力されないので注意！
    }

    //呼び出し
    $num_1 = 3;
    $num_2 = 7;
    $a = calc($num_1,$num_2);//$aっていう変数にはcalkに$num_1と$num_2(実引数)を代入して処理した戻り値を格納するという意味（変数$aに$num_1と$num_2を代入したcalkを呼び出した）
    echo $a; //戻り値の出力


    //  ローカルスコープ(ユーザー定義関数を定義する場所)                                                                                                
    //    function calc ($val_1,$val_2,$v = 10) {  
    //    $ans = ($val_1 + $val_2 + $num_3) * $v; ← エラー（グローバルスコープで定義された$num_3をここで用いることはできない）
    //    return $ans;
    //    }
    //
    //  グローバルスコープ（ローカルスコープの外側）
    //    $num_1 = 3;  $num_2 = 7;  
    //    $a = calc($num_1,$num_2);  
    //    echo $a;  
    //    echo $ans; ← エラー（ローカルスコープで定義された$ansをここで用いることはできない）

    echo '<br>';

    // ６．タイプヒンティング(関数の型宣言)

    function calc5_6_1 ( array $val ,$seki=10) : int { //(引数の型宣言(配列型以外が実引数として指定されたときはエラーになる)) : 関数の戻り値の型宣言(整数以外が出力されたときはエラーになる)
        $ans = ($val[0] + $val[1]) * $seki;
        return $ans;
    }

    $num_arr = [3,7];
    $a = calc5_6_1 ($num_arr);
    echo $a;

    echo '<br>';


